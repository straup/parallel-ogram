<?
	#
	# $Id$
	#

	$GLOBALS['cfg'] = array();

	$GLOBALS['cfg']['site_name'] = 'parallel-ogram';
	$GLOBALS['cfg']['environment'] = 'prod';

	$GLOBALS['cfg']['site_disabled'] = 0;
	$GLOBALS['cfg']['site_disabled_retry_after'] = 0;	# seconds; if set will return HTTP Retry-After header

	# Things you'll need to tweak

	# You will need valid Instagram OAuth credentials
	# See also: http://instagram.com/developer/client/register/

	$GLOBALS['cfg']['instagram_oauth_key'] = '';
	$GLOBALS['cfg']['instagram_oauth_secret'] = '';
	
	# Don't change this (but if you do be sure to update the main
	# .htaccess file accordingly).
	
	$GLOBALS['cfg']['instagram_oauth_callback'] = 'auth/';

	# Setting up the database
	# See also: https://github.com/straup/flamework-tools/blob/master/bin/setup-db.sh

	$GLOBALS['cfg']['db_main'] = array(
		'host'	=> 'DATABASE_HOST',
		'name'	=> 'DATABASE_NAME',
		'user'	=> 'DATABASE_USER',
		'pass'	=> 'DATABASE_USER_PASSWORD',
		'auto_connect' => 0,
	);

	# Creating secret keys for your website - these are important.
	# See also: parallel-ogram/bin/generate_secret.php

	$GLOBALS['cfg']['crypto_cookie_secret'] = '';
	$GLOBALS['cfg']['crypto_password_secret'] = '';
	$GLOBALS['cfg']['crypto_crumb_secret'] = '';

	# Backups - by default anyone who knows where your copy of
	# parallel-ogram is (on the Internet) could register to have
	# their photos (and likes) backed up. If you don't want to
	# let anyone else backup their photos then you should disable
	# the 'enable_feature_backups_registration' flag. If you want
	# to limit who can register take a look at the invite code
	# flags below.

	$GLOBALS['cfg']['enable_feature_backups'] = 1;
	$GLOBALS['cfg']['enable_feature_backups_registration'] = 1;

	# This is where your Instagram photos will be stored
	# It should have a trailing slash e.g. /usr/local/parallelogram-static/
	
	$GLOBALS['cfg']['instagram_static_path'] = ''

	# Invite codes – these are used to limit who can register
	# to have their photos backed up. You'll need to do a
	# few things to enable this:

	# 1) enable the feature flags below for invite codes and
	#    god auth (which is explained later)

	# 2) generate a new secret for encrypting invite cookies
	#    parallel-ogram/bin/generate_secret.php

	# 3) set up poorman's 'god auth' – basically this is just
	#    restricting access to a list of logged in user using
	#    cookies; it works but I wouldn't call it "secure"

	# Once that's done you can manage or create new invites
	# here:

	# $GLOBALS['cfg']['abs_root_url']/god/invites/
	# $GLOBALS['cfg']['abs_root_url']/god/invites/generate/

	# In addition, if a user tries to go to the backup page
	# they've got stopped by an invite code wall which will
	# allow them to request an invite code but you'll still
	# need to send it manually (by pressing a button on the
	# god page).

	$GLOBALS['cfg']['enable_feature_invite_codes'] = 0;

	$GLOBALS['cfg']['crypto_invite_secret'] = '';

	$GLOBALS['cfg']['auth_enable_poormans_god_auth'] = 0;

	$GLOBALS['cfg']['auth_poormans_god_auth'] = array(

	#       as in a user's 'id' from the 'users' table
	#	in db_main

	#	'0' => array(
	#		'roles' => array('admin')
	#	),

	);

	# Things you may want to tweak (but otherwise don't need to worry about)

	$GLOBALS['cfg']['enable_feature_signup'] = 1;
	$GLOBALS['cfg']['enable_feature_signin'] = 1;
	$GLOBALS['cfg']['enable_feature_persistent_login'] = 1;
	$GLOBALS['cfg']['enable_feature_account_delete'] = 0;
	$GLOBALS['cfg']['enable_feature_password_retrieval'] = 0;

	$GLOBALS['cfg']['enable_feature_api'] = 0;
	$GLOBALS['cfg']['enable_feature_api_documentation'] = 0;

	$GLOBALS['cfg']['abs_root_url']		= 'http://'.($_SERVER['SERVER_NAME'] ? $_SERVER['SERVER_NAME'] : 'fake.com').'/';
	$GLOBALS['cfg']['safe_abs_root_url']	= $GLOBALS['cfg']['abs_root_url'];

	$GLOBALS['cfg']['smarty_template_dir'] = realpath(dirname(__FILE__) . '/../templates/');
	$GLOBALS['cfg']['smarty_compile_dir'] = realpath(dirname(__FILE__) . '/../templates_c/');

	$GLOBALS['cfg']['auth_cookie_domain'] = parse_url($GLOBALS['cfg']['abs_root_url'], 1);
	$GLOBALS['cfg']['auth_cookie_name'] = md5($GLOBALS['cfg']['auth_cookie_domain']) . '-a';

	$GLOBALS['cfg']['crumb_ttl_default'] = 300;	# seconds

	$GLOBALS['cfg']['rewrite_static_urls'] = array(
		# '/foo' => '/bar/',
	);

	$GLOBALS['cfg']['email_from_name']	= 'flamework app';
	$GLOBALS['cfg']['email_from_email']	= 'admin@ourapp.com';
	$GLOBALS['cfg']['auto_email_args']	= '-fadmin@ourapp.com';

	$GLOBALS['cfg']['user'] = null;

	# If you are running Flamework on a host where you can not change the permissions
	# on the www/templates_c directory (to be owned by the web server) you'll need to
	# do a couple of things. The first is to set the 'smarty_compile' flag to 0. That
	# means you'll need to pre-compile all your templates by hand. You can do this with
	# 'compile-templates.php' script that is part of Flamework 'bin' directory. Obviously
	# this doesn't make much sense if you are actively developing a site but might be
	# useful if you've got something working and then just want to run it on a shared
	# hosting provider where you can't change the permissions on on files, like pair or
	# dreamhost. (20120110/straup)

	$GLOBALS['cfg']['smarty_compile'] = 1;

	$GLOBALS['cfg']['http_timeout'] = 3;

	$GLOBALS['cfg']['check_notices'] = 1;

	$GLOBALS['cfg']['db_profiling'] = 0;

	$GLOBALS['cfg']['db_enable_poormans_federation'] = 1;
	$GLOBALS['cfg']['db_enable_poormans_ticketing'] = 1;

	#
	# This will assign $pagination automatically for smarty
	#
	
	$GLOBALS['cfg']['pagination_assign_smarty_variable'] = 1;

	$GLOBALS['cfg']['pagination_per_page'] = 10;
	$GLOBALS['cfg']['pagination_spill'] = 0;
	$GLOBALS['cfg']['pagination_style'] = 'pretty';

	#
	# enable this flag to show a full call chain (instead of just the
	# immediate caller) in database query log messages and embedded in
	# the actual SQL sent to the server.
	#

	$GLOBALS['cfg']['db_full_callstack'] = 0;

	$GLOBALS['cfg']['allow_prefetch'] = 0;

?>